#!/usr/bin/env python3
import argparse
import json
import select
import socket
import copy

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
    """ Your Router """

    def __init__(self, networks, asn):
        self.routes = {}
        self.revokes = []
        self.updates = []
        self.relations = {}
        self.sockets = {}
        self.asn = asn
        self.forwardTable = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # At the bare minimum every IP address has a netmask of at least 255.0.0.0
        # so if the first segment of the IP addresses match they are on the same network
        outroutes = []
        for key in self.forwardTable:
            for packet in self.forwardTable[key]:
                # Check the first part of IP addresses to see if they match
                if packet["network"].partition(".")[0] == daddr.partition(".")[0]:
                    #They do match so append the route
                    outroutes.append(key)
        return outroutes

    def get_shortest_as_path(self, routes, daddr):
        """ select the route with the shortest AS Path, the route with the smallest AS path list """
        # If the len of routes is already 1 we dont need to do the method and can just return the route
        if len(routes) == 1:
            return routes
        else:
            outroutes = []
            #Set max value highet than anything it could encounter
            smallestRoute = 10000000
            for route in routes:
                for key in self.forwardTable:
                    if key == route:
                        for packet in self.forwardTable[key]:
                            if packet["network"].partition(".")[0] == daddr.partition(".")[0]:
                                #If our ASPATh is smaller than the current smallestRoute value this is our new smallest
                                #route
                                if len(packet[APTH]) < smallestRoute:
                                    outroutes = [route]
                                    smallestRoute = len(packet[APTH])
                                #Else if the length of our packets ASPath is equal to the smallest route then both this
                                #packet and the one already in outroutes could be valid
                                elif len(packet[APTH]) == smallestRoute:
                                    if route in outroutes:
                                        continue
                                    else:
                                        outroutes.append(route)
        return outroutes

    def get_highest_preference(self, routes, daddr):
        """ select the route with the highest Local Preference. Select routes with a higher number for this value """
        # If the len of routes is already 1 we dont need to do the method and can just return the route
        if len(routes) == 1:
            return routes
        else:
            outroutes = []
            #Accumulator for the highest local preference
            highestLP = 0
            for route in routes:
                for key in self.forwardTable:
                    if key == route:
                        for packet in self.forwardTable[key]:
                            if packet["network"].partition(".")[0] == daddr.partition(".")[0]:
                                #If the local preference is higher than our current highest
                                #then this is the new route to use
                                if packet[LPRF] >= highestLP:
                                    if route in outroutes:
                                        continue
                                    else:
                                        highestLP = packet[LPRF]
                                        outroutes.append(route)

            return outroutes

    def get_self_origin(self, routes, daddr):
        """ select self originating routes. A True value is preferred over a False value """
        # If the len of routes is already 1 we dont need to do the method and can just return the route
        if len(routes) == 1:
            return routes
        else:
            outroutes = []
            for route in routes:
                for key in self.forwardTable:
                    if key == route:
                        for packet in self.forwardTable[key]:
                            if packet["network"].partition(".")[0] == daddr.partition(".")[0]:
                                #True is preferred to False so we append the route if it is true
                                #unless it is already in outroutes
                                if packet[SORG] == True:
                                    if route in outroutes:
                                        continue
                                    else:
                                        outroutes.append(route)
            # Check if none of the routes had a true value
            # If none had a true value just return the routes that the function started with
            if len(outroutes) == 0:
                return routes
            else:
                return outroutes

    def get_origin_routes(self, routes, daddr):
        """ select origin routes: IGP > EGP > UNK """
        #If the len of routes is already 1 we dont need to do the method and can just return the route
        if len(routes) == 1:
            return routes
        else:
            outroutes = []
            #Accumulators for the 3 different types
            EGPRoutes = 0
            IGPRoutes = 0
            UNKRoutes = 0
            for route in routes:
                for key in self.forwardTable:
                    if key == route:
                        for packet in self.forwardTable[key]:
                            if packet["network"].partition(".")[0] == daddr.partition(".")[0]:
                                # First Priority if IGP
                                #If the IGP accumulator is 0 then this is the new best route
                                if packet[ORIG] == "IGP":
                                    if IGPRoutes == 0:
                                        outroutes = [route]
                                        IGPRoutes += 1
                                    else:
                                        if route not in outroutes:
                                            outroutes.append(route)
                                            IGPRoutes += 1
                                # Second Priority is EGP
                                # If we have not appened any IGP routes and this is our first egp route
                                # then this is the new best route
                                if packet[ORIG] == "EGP":
                                    if IGPRoutes == 0:
                                        if EGPRoutes == 0:
                                            outroutes = [route]
                                            EGPRoutes += 1
                                        else:
                                            if route not in outroutes:
                                                outroutes.append(route)
                                                EGPRoutes += 1
                                # Third Priority is UNK
                                # This is only the best route if no IGP or EGP routes have already been added
                                if packet[ORIG] == "UNK":
                                    if IGPRoutes == 0 and EGPRoutes == 0:
                                        if UNKRoutes == 0:
                                            outroutes = [route]
                                            UNKRoutes += 1
                                        else:
                                            if route not in outroutes:
                                                outroutes.append(route)
                                                UNKRoutes += 1
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        #This is our source relationship
        relation = self.relations[srcif]
        outroutes = []
        # If our source is a customer we send to all the neighbors
        if relation == CUST:
            return routes
        else:
            for route in routes:
                #This is out destination relationship
                destinationRelationship = self.relations[route]
                # Only allow a peer or a provider to send to a customer
                if destinationRelationship == PEER:
                    continue
                # Only allow a peer or a provider to send to a customer
                elif destinationRelationship == PROV:
                    continue
                # Our destination is a customer and our source is a peer or provider so we are good to send
                else:
                    outroutes.append(route)
        return outroutes

    def get_longest_prefix_matching(self, routes, daddr):
        print("GET_ longest _prefix _ _ __ _ _ _ _ _ mathcin @@#!@#!")
        print("daddr : ", daddr)  # 192.0.0.25
        print("routes : ", routes)  # ['192.168.0.2']
        print("route[0] : ", routes[0])
        print(type(daddr), type(routes[0]))
        daddr_octet_strings = daddr.split(".")

        # for key in self.forwardTable:
        #   print("key : ", key, type(key))
        #   for packet in self.forwardTable[key]:
        #     print("packet : ", packet)

        # print("the good stuff : ", type(daddr))
        longest_match = [routes[0]]
        longest_match_num = 0
        # route = No
        for route in routes:
            route_octet_strings = route.split(".")
            print('\n')
            fwtb = self.forwardTable[route]
            #print("route : ", route, "fwtb : ", fwtb, '\n')

            for packet in fwtb:
                netmask = packet.get(NMSK)
                network = packet.get(NTWK)
                #print("netmask : ", netmask, " network : ", network)

                network_bin = self.encode_ip_as_binary(network)
                netmask_bin = self.encode_ip_as_binary(netmask)

                daddr_bin = self.encode_ip_as_binary(daddr)
                #print("daddr_bin : ", daddr_bin)  # 1000000000000000000000011001000

                packet_network = self.get_ntwk_from_mask(network_bin, netmask_bin)
                #print("packet_network : ", packet_network, type(packet_network))  # 100000010101000

                num_match = self.get_prefix_match_num(packet_network, daddr_bin)
                if num_match > longest_match_num:
                    longest_match_num = num_match
                    longest_match = [route]
        print("longest_prefix_match : ", longest_match)
        return longest_match
        # print("ntwk : ", ntwk, "nmsk : ", nmsk)
        # updates = self.updates{route}

    def get_ntwk_from_mask(self, ip, mask):
        ntwk = ""
        for i in range(len(ip)):
            #print("mask[i]  = ", mask[i], "ip[i] =  ", ip[i], type(mask[i]))
            if int(mask[i]) == 1:
                ntwk += ip[i]
        print("ntwk : ", ntwk)
        return ntwk
        # ip1/ip2 are both strings

    def get_prefix_match_num(self, ip1, ip2):
        num_match = 0
        for i in range(min(len(ip1), len(ip2))):
            if ip1[i] == ip2[i]:
                num_match += 1
        print("num_match for ", ip1, "and ", ip2, "is : ", num_match)
        return num_match

    def encode_ip_as_binary(self, ip):
        octets = ip.split(".")
        print("octets : ", octets)
        bin_rep = ""
        for octet in octets:
            bin_octet = int(float(str((bin(int(octet)))[2:])))
            #print("type : ", type(bin_octet))
            #print("LOOKIE : ", bin_octet)
            str_octet = str(bin_octet)
            while len(str_octet) < 8:
                str_octet += "0"
            # bin_rep += "." + str_octet
            bin_rep += str_octet
        bin_rep = bin_rep[1:]
        print("THIS IS IP AS BINARY: ", bin_rep)
        return bin_rep

    #Method to get CIDR value from a Netmask
    def get_cidr_from_netmask(self, netmask):
        return (sum([bin(int(bits)).count("1") for bits in netmask.split(".")]))

    #Method to get Netmask from a CIDR
    def get_netmask_from_cidr(self, cidr):
        mask = [0, 0, 0, 0]
        for i in range(cidr):
            mask[i // 8] = mask[i // 8] + (1 << (7 - i % 8))
        netmask = "{}.{}.{}.{}".format(mask[0], mask[1], mask[2], mask[3])
        return netmask

    def get_route(self, srcif, daddr):
        """ Select the best route for a given address """
        peer = None
        routes = self.lookup_routes(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes, daddr)
            # 2. Self Origin
            routes = self.get_self_origin(routes, daddr)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes, daddr)
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes, daddr)
            # 5. Lowest IP Address
            routes = [self.get_lowest_ip(routes)]
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
            #Get the longest prefix match
            #routes = self.get_longest_prefix_matching(routes, daddr)
        #If we dont have anything in routes our peer will stay as None
        if len(routes) == 0:
            peer = None
        #Else is we have 1 value in routes then this is the route to use
        elif len(routes) == 1:
            peer = routes[0]
        #We should not have more than 1 value in routes. Throw an Exception
        else:
            raise Exception("Error: More than one route after filtering through the routes")
        return self.sockets[peer] if peer else None

    #Method to get the lower IP of 2 IP addresses
    def get_lower_ip(self, ip1, ip2):
        split_ip1 = ip1.split(".")
        split_ip2 = ip2.split(".")
        for i in range(len(split_ip1)):
            if split_ip1[i] == split_ip2[i]:
                continue
            elif split_ip1[i] < split_ip2[i]:
                return ip1
            elif split_ip2[i] < split_ip1[i]:
                return ip2
            else:
                return "!!!!! get_lowest_ip() broke with ips :", ip1, ip2
        return ip1

    #Method to get the lowest IP from a list of ips
    def get_lowest_ip(self, ip_list):
        lowest_ip = None
        if len(ip_list) == 1:
            return ip_list[0]
        else:
            for i in range(len(ip_list) - 1):
                lowest_ip = self.get_lower_ip(ip_list[i], ip_list[i + 1])
            return lowest_ip

    #Forward a data message. If a route is not provided we are handling an error which will return False
    #And from the run method return send_error
    def forward(self, packet, route=None):
        """ Forward a data packet """
        # Handling a DATA message
        if route != None:
            route.sendall(json.dumps(packet).encode())
            return True
        # Send an Error
        else:
            return False

    #Method to determine if two routes are adjacent
    #We check to make sure they are on the same network and are 1 hop away from eachother.
    def isAdjacent(self, route1, route2):
        r1 = route1[NTWK].split(".")
        r2 = route2[NTWK].split(".")
        r1netmask = route1[NMSK]
        r2netmask = route2[NMSK]
        if r1[0] == r2[0] and r1[1] == r2[1]:
            if r1netmask == r2netmask:
                if int(r1[2]) == int(r2[2]) - 1 or int(r1[2]) == int(r2[2]) + 1:
                    return True
                elif int(r1[2]) == 0 and int(r2[2]) == 2:
                    return True
        return False

    def coalesce(self, ft):
        """ coalesce any routes that are right next to each other """
        matchingRoutes = []
        #To coalesce we iterate through each packet in our forwarding table and compare it to every other
        # packet in our forward table. If two packets are adjacent to eachother we add them to a list of matching routes
        for n in range(len(ft)):
            matchingRoutes = []
            for m in range(n + 1, len(ft)):
                if self.isAdjacent(ft[n], ft[m]):
                    matchingRoutes.append(ft[n])
                    matchingRoutes.append(ft[m])

            #Here we are iterating through our adjacent routes from our forwarding table in which case again we compare
            #each individual route to every other route in matching routes. If the peers are the same and all other attributes
            #are the same the routes can be coalesced.
            for i in range(len(matchingRoutes)):
                for k in range(i + 1, len(matchingRoutes)):
                    if matchingRoutes[i][PEER] == matchingRoutes[k][PEER]:
                        self.coalesce_routes(matchingRoutes[i], matchingRoutes[k])
        return True

    #Method to coalesce two routes. Removing one route from our table and modifying the other
    def coalesce_routes(self, route1, route2):
        # Remove one of the routes from our forwarding table
        for key in self.forwardTable:
            for route in self.forwardTable[key]:
                if route == route2:
                    self.forwardTable[key].remove(route)
        # Modify Route 1 to coalesce with route 2
        route1PEER = route1[PEER]
        route1CIDR = self.get_cidr_from_netmask(route2[NMSK])
        route1CIDR = route1CIDR - 1
        for route in self.forwardTable[route1PEER]:
            if route == route1:
                route[NMSK] = self.get_netmask_from_cidr(route1CIDR)

    #Method to send an update message back
    def send_update(self, srcif, packet):
        # Send an Update Message to the given source interface
        updatePacket = copy.deepcopy(packet)
        updatePacket[SRCE] = srcif.replace('.2', '.1')
        updatePacket[DEST] = srcif
        updatePacket[MESG][APTH].append(int(self.asn))
        self.sockets[srcif].sendall(json.dumps(updatePacket).encode())

    def update(self, srcif, packet):
        """ handle update packets """
        # Map our update message, Source mapped to the Message
        # 1.) Save a copy of the announcement for later use in rebuilding forwarding tables
        self.updates.append(packet)
        # Update the Forwarding Table
        # 2.) Add an entry to our forwarding table
        message = packet[MESG]
        tempDictionary = {}
        tempDictionary[NTWK] = message[NTWK]
        tempDictionary[NMSK] = message[NMSK]
        tempDictionary[LPRF] = message[LPRF]
        tempDictionary[APTH] = message[APTH]
        tempDictionary[ORIG] = message[ORIG]
        tempDictionary[SORG] = message[SORG]
        tempDictionary[PEER] = packet[SRCE]
        # Check if this peer already exists in our forwarding table
        if packet[SRCE] in self.forwardTable:
            self.forwardTable[packet[SRCE]].append(tempDictionary)
        else:
            self.forwardTable[packet[SRCE]] = [tempDictionary]
        # Add to our updates which socket sent which update packet
        packet['srcif'] = srcif
        # Get the relation of the current socket connection
        relation = self.relations[srcif]
        #Send update message back
        self.send_revoke_or_update(relation, srcif, packet, True)
        #Coalesce after every update incase we have routes in the forward table that can be coalesced
        self.coalesce(self.build_forward_table())
        return True

    #Method to determine if the message we are sending is a revoke or update
    def send_revoke_or_update(self, relation, srcif, packet, isUpdate):
        for s in self.sockets:
            # Update is recieved from a customer so send to all neighbors
            if relation == CUST:
                # Make sure we do not send the update to ourself
                if s == srcif:
                    continue
                else:
                    #If isUpdate then we are sending an update else send a revoke
                    if isUpdate:
                        self.send_update(s, packet)
                    else:
                        self.send_revoke(s, packet)
            # Update is recieved from a peer or provider so only send to your customers
            elif relation == PEER or relation == PROV:
                if self.relations[s] == CUST:
                    # If isUpdate then we are sending an update else send a revoke
                    if isUpdate:
                        self.send_update(s, packet)
                    else:
                        self.send_revoke(s, packet)

    #Method to send a revoke message back
    def send_revoke(self, srcif, packet):
        # Send a revoke message to the given source interface
        revokePacket = copy.deepcopy(packet)
        revokePacket[SRCE] = srcif.replace('.2', '.1')
        revokePacket[DEST] = srcif
        revokePacket[TYPE] = RVKE
        self.sockets[srcif].sendall(json.dumps(revokePacket).encode())

    def revoke(self, srcif, packet):
        """ handle revoke packets """
        # Rebuild our forward table with every update we have recieved and remove any previous revokes
        # we have received. This step was added for deaggregation
        self.rebuild_forward_table()
        # Save a copy of the revokation message
        self.revokes.append(packet)

        #Build our forwarding table into the message format
        Ftable = self.build_forward_table()

        #Get the revoked networks and source
        revokedNetworks = packet[MESG]
        revokedSource = packet[SRCE]
        # Remove revoked packets from our forwarding table
        valuesToRemove = []
        for revoke in revokedNetworks:
            for i in range(len(Ftable)):
                if revoke[NTWK] == Ftable[i][NTWK] and revoke[NMSK] == Ftable[i][NMSK] and revokedSource == Ftable[i][
                    PEER]:
                    valuesToRemove.append(Ftable[i])
        # remove from our forward table
        for key in self.forwardTable:
            for val in valuesToRemove:
                if val[PEER] == key:
                    self.forwardTable[key].remove(val)
        # Get the relation of the current socket connection
        relation = self.relations[srcif]
        #Send revoke message
        self.send_revoke_or_update(relation, srcif, packet, False)
        return True

    #Method to build our forward table into the format for the message parameter in the dump responses.
    def build_forward_table(self):
        # Build our forward table from every packet currently in it
        table = []
        for key in self.forwardTable:
            for packet in self.forwardTable[key]:
                table.append(packet)
        return table

    #Rebuild forward table for deaggregation
    def rebuild_forward_table(self):
        #Rebuild our forwarding table from every update that we have recieved
        self.forwardTable = {}
        for packet in self.updates:
            message = packet[MESG]
            tempDictionary = {}
            tempDictionary[NTWK] = message[NTWK]
            tempDictionary[NMSK] = message[NMSK]
            tempDictionary[LPRF] = message[LPRF]
            tempDictionary[APTH] = message[APTH]
            tempDictionary[ORIG] = message[ORIG]
            tempDictionary[SORG] = message[SORG]
            tempDictionary[PEER] = packet[SRCE]
            # Check if this peer already exists in our forwarding table
            if packet[SRCE] in self.forwardTable:
                self.forwardTable[packet[SRCE]].append(tempDictionary)
            else:
                self.forwardTable[packet[SRCE]] = [tempDictionary]

        # Go through our revoked messages and remove any reovoked networks from our newly constructed forwarding table
        for p in self.revokes:
            Ftable = self.build_forward_table()
            revokedNetworks = p[MESG]
            revokedSource = p[SRCE]
            # remove reovked packets from our forwarding table
            valuesToRemove = []
            for revoke in revokedNetworks:
                for i in range(len(Ftable)):
                    if revoke[NTWK] == Ftable[i][NTWK] and revoke[NMSK] == Ftable[i][NMSK] and revokedSource == \
                            Ftable[i][PEER]:
                        valuesToRemove.append(Ftable[i])
            # remove from our forward table
            for key in self.forwardTable:
                for val in valuesToRemove:
                    if val[PEER] == key:
                        self.forwardTable[key].remove(val)

    def dump(self, packet):
        """ handles dump table requests """
        #When dumping we start by coalescing any routes in our forwarding table that can be coalesced.
        #This is for deaggregation when the forward table is reconstructed and we need to dump again
        self.coalesce(self.build_forward_table())

        #Build our forwarding table to the format that it should be in the message parameter.
        forwardTable = self.build_forward_table()

        #Set up the Table message to send back with our forwarding table as the message paramet
        tempDict = {}
        tempDict[SRCE] = packet[DEST]
        tempDict[DEST] = packet[SRCE]
        tempDict[TYPE] = TABL
        tempDict[MESG] = forwardTable
        self.sockets[packet[SRCE]].sendall(json.dumps(tempDict).encode())
        return True

    def handle_packet(self, srcif, packet):
        """ dispatches a packet """
        #Handle a packet based on if we get one of the 5 packet types
        #If we don't receive one of the five types we raise an exception
        type = packet['type']
        if type == DATA:
            route = self.get_route(srcif, packet[DEST])
            return self.forward(packet, route)
        elif type == UPDT:
            return self.update(srcif, packet)
        elif type == RVKE:
            return self.revoke(srcif, packet)
        elif type == DUMP:
            return self.dump(packet)
        elif type == "wait":
            pass
        else:
            raise Exception("Unknown Packet Type " + type)

    def send_error(self, conn, msg, srcif):
        """ Send a no_route error message """
        # Send the No Route Response Message As Specified On The Assignment Page
        # This happens if we try to forward information but are provided no route.
        tempDict = {}
        tempDict[SRCE] = srcif.replace('.2', '.1')
        tempDict[DEST] = msg[SRCE]
        tempDict[TYPE] = NRTE
        tempDict[MESG] = {}
        conn.send(json.dumps(tempDict).encode())
        return

    #Run method to run the router
    def run(self):
        """ main loop for the router """
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg, srcif)
                else:
                    return

#Run Script and set up argument parser
if __name__ == "__main__":
    PARSER = argparse.ArgumentParser(description='route packets')
    PARSER.add_argument('asn')
    PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
    ARGS = PARSER.parse_args()
    Router(ARGS.networks, ARGS.asn).run()
