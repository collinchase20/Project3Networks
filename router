#!/usr/bin/env python3
import argparse
import json
import select
import socket
import copy

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, networks, asn):
    self.routes = {}
    self.updates = {}        #{192.168.0.2 : {"network": "192.168.0.0", "netmask": "255.255.255.0", "localpref": 100, "ASPath": [1], "origin": "EGP", "selfOrigin": true}}
    self.relations = {}      #{192.168.0.2 : cust}
    self.sockets = {}        #{192.168.0.2 : socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)}
    self.asn = asn
    self.forwardTable = []
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    # TODO
    print("Starting to lookup routes for this address: " + daddr)
    outroutes = []
    for packet in self.forwardTable:
      if packet["network"].split(".")[0] == daddr.split(".")[0]:
        outroutes.append(packet[PEER])
    return outroutes


  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    return outroutes

  def get_highest_preference(self, routes):
    """ select the route with the shortest AS Path """
    #This is the route with the highest local preference value
    # TODO
    outroutes = []
    highestPreference = 0
    for route in routes:
      if route[LPRF] > highestPreference:
        highestPreference = route[LPRF]
        outroutes.append(routes)

    return outroutes

  def get_self_origin(self, routes):
    """ select self originating routes """
    #These are the routes where "selfOrigin" is true
    # TODO
    outroutes = []
    for route in routes:
      if route[SORG] == "true":
        outroutes.append(route)
    return outroutes

  def get_origin_routes(self, routes):
    """ select origin routes: EGP > IGP > UNK """
    # TODO
    outroutes = []

    return outroutes

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []
    return outroutes

  def get_lowest_address(self, routes):
    lowestRoutes = []
    for route in routes:
      lowestRoutes.append(min(route))
    return lowestRoutes

  def get_cidr_from_netmask(self, netmask):
    return (sum([bin(int(bits)).count("1") for bits in netmask.split(".")]))


  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    # TODO
    print("Starting get_route")
    peer = None
    routes = self.lookup_routes(daddr)

    print("THESE ARE THE ROUTES AFTER GET VALID ROUTES: " + str(routes))

    # Rules go here
    if routes:
      # 1. Highest Preference
      routes = self.get_highest_preference(routes)
      # 2. Self Origin
      routes = self.get_self_origin(routes)
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes)
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes)
      # 5. Lowest IP Address
      routes = self.get_lowest_address(routes)
      # Final check: enforce peering relationships
      routes = self.filter_relationships(srcif, routes)
    return self.sockets[peer] if peer else None

  def forward(self, srcif, packet):
    """ Forward a data packet """
    # TODO
    #Forwarding to the destination specified in the packet
    destination = packet[DEST]
    #Get the route for destination
    route = self.get_route(srcif, destination)
    try:
      route.sendall(json.dumps(packet).encode())
    except:
      print("The route might be invalid, this is the route: " + str(route))
    return True

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False

  def update(self, srcif, packet):
    """ handle update packets """
    #Map our update message, Source mapped to the Message
    #1.) Save a copy of the announcement incase we need it later
    self.updates[packet['src']] = packet

    #Update the Forwarding Table
    #2.) Add an entry to our forwarding table
    message = packet["msg"]
    tempDictionary = {}
    tempDictionary[NTWK] = message[NTWK]
    tempDictionary[NMSK] = message[NMSK]
    tempDictionary[LPRF] = message[LPRF]
    tempDictionary[APTH] = message[APTH]
    tempDictionary[ORIG] = message[ORIG]
    tempDictionary[SORG] = message[SORG]
    tempDictionary[PEER] = packet[SRCE]
    self.forwardTable.append(tempDictionary)

    print("Just Updated Forwarding Table")
    print(self.forwardTable)

    #Add to our updates which socket sent which update packet
    self.updates[srcif] = packet

    #3.)Potentially send copies of the announcement to neighboring routers
    for s in self.sockets:
      #dont send to itself
      if s == packet[SRCE]:
        print("We are not sending to itself")
        continue
      else:
        copiedPacket = copy.deepcopy(packet)
        # Old destination is our new source
        print("This is the new source: " + copiedPacket[DEST])
        copiedPacket[SRCE] = copiedPacket[DEST]
        # And the socket becomes our new destination
        copiedPacket[DEST] = s
        copiedPacket[MESG][APTH] = [int(self.asn)]
        self.sockets[s].sendall(json.dumps(copiedPacket).encode())
    return True

  def revoke(self, packet):
    """ handle revoke packets """
    # TODO
    return True

  def dump(self, packet):
    """ handles dump table requests """
    # TODO
    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    type = packet['type']
    if type == DATA:
      print("Starting Forward")
      return self.forward(srcif, packet)
    elif type == UPDT:
      print("Starting Update")
      return self.update(srcif, packet)
    elif type == RVKE:
      print("Starting Revoke")
      return self.revoke(packet)
    elif type == DUMP:
      print("Starting Dump")
      return self.dump(packet)
    elif type == NRTE:
      return self.send_error(packet['src'], packet['msg'])
    else:
      print ("Unknown Packet Type: " + type)
      return

  def send_error(self, conn, msg):
    """ Send a no_route error message """
    # TODO
    print("Message type was No Route")
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          print ("---------------------------")
          print ("Type: " + msg['type'])
          print ("Src:" + msg['src'])
          print ("Dst:" + msg['dst'])
          print ("Msg:" + json.dumps(msg['msg']))
          print ("---------------------------")
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg)
        else:
          return




if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn')
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  for val in ARGS.networks:
    print("This is one of the networks: " + val)
  print("This is the asn: " + str(ARGS.asn))
  Router(ARGS.networks, ARGS.asn).run()
