#!/usr/bin/env python3
import argparse
import json
import select
import socket
import copy

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, networks, asn):
    self.routes = {}
    self.revokes = {}
    self.updates = {}        #{192.168.0.2 : {"network": "192.168.0.0", "netmask": "255.255.255.0", "localpref": 100, "ASPath": [1], "origin": "EGP", "selfOrigin": true}}
    self.relations = {}      #{192.168.0.2 : cust}
    self.sockets = {}        #{192.168.0.2 : socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)}
    self.asn = asn
    self.forwardTable = {}
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation


  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    #At the bare minimum every IP address has a netmask of at least 255.0.0.0
    #so if the first segment of the IP addresses match they are on the same network
    print("Starting to lookup routes for this address: " + daddr)
    outroutes = []
    for key in self.forwardTable:
      for packet in self.forwardTable[key]:
        # Check the first part of IP addresses
        if packet["network"].partition(".")[0] == daddr.partition(".")[0]:
          # Check the second part of the netmask
          #if packet["netmask"].split(".")[1] == '255':
            # IF the second part of the netmask is 255 then the second part of the IP addresses need to match
            #if packet['network'].split('.')[1] == daddr.split(".")[1]:
              outroutes.append(key)
              # Second part of the nermask was 0, so only the first part of the IP addrssses need to match
          #else:
            #outroutes.append(key)
    return outroutes


  def get_shortest_as_path(self, routes, daddr):
    """ select the route with the shortest AS Path, the route with the smallest AS path list """
    if len(routes) == 1:
      return routes
    else:
      print("DOING GET SHORTEST AS PATH FOR THESE ROUTES: " + str(routes))
      outroutes = []
      smallestRoute = 10000000
      for route in routes:
        for key in self.forwardTable:
          if key == route:
            for packet in self.forwardTable[key]:
              if packet["network"].partition(".")[0] == daddr.partition(".")[0]:
                if len(packet[APTH]) < smallestRoute:
                  outroutes = [route]
                  smallestRoute = len(packet[APTH])
                elif len(packet[APTH]) == smallestRoute:
                  if route in outroutes:
                    continue
                  else:
                    outroutes.append(route)
    return outroutes


  def get_highest_preference(self, routes, daddr):
    """ select the route with the highest Local Preference. Select routes with a higher number for this value """
    #This is the route with the highest local preference value
    # TODO
    if len(routes) == 1:
      return routes
    else:
      print("DOING GET HIGHEST PREFERENCE THESE ROUTES: " + str(routes))
      outroutes = []
      highestLP = 0
      for route in routes:
        for key in self.forwardTable:
          if key == route:
            for packet in self.forwardTable[key]:
              if packet["network"].partition(".")[0] == daddr.partition(".")[0]:
                if packet[LPRF] >= highestLP:
                  if route in outroutes:
                    continue
                  else:
                    highestLP = packet[LPRF]
                    outroutes.append(route)

      return outroutes


  def get_self_origin(self, routes, daddr):
    """ select self originating routes. A True value is preferred over a False value """
    #These are the routes where "selfOrigin" is true
    if len(routes) == 1:
      return routes
    else:
      print("DOING GET SELF ORIGIN THESE ROUTES: " + str(routes))
      outroutes = []
      for route in routes:
        for key in self.forwardTable:
          if key == route:
            for packet in self.forwardTable[key]:
              if packet["network"].partition(".")[0] == daddr.partition(".")[0]:
                if packet[SORG] == True:
                  if route in outroutes:
                    continue
                  else:
                    outroutes.append(route)
      #Check if none of the routes had a true value
      if len(outroutes) == 0:
        return routes
      else:
        return outroutes

  def get_origin_routes(self, routes, daddr):
    """ select origin routes: IGP > EGP > UNK """
    if len(routes) == 1:
      return routes
    else:
      print("DOING GET ORIGIN FOR THESE ROUTES: " + str(routes))
      outroutes = []
      EGPRoutes = 0
      IGPRoutes = 0
      UNKRoutes = 0
      for route in routes:
        for key in self.forwardTable:
          if key == route:
            for packet in self.forwardTable[key]:
              if packet["network"].partition(".")[0] == daddr.partition(".")[0]:
                #First Priority
                if packet[ORIG] == "IGP":
                  if IGPRoutes == 0:
                    outroutes = [route]
                    IGPRoutes += 1
                  else:
                    if route not in outroutes:
                      outroutes.append(route)
                      IGPRoutes += 1
                #Second Priority
                if packet[ORIG] == "EGP":
                  if IGPRoutes == 0:
                    if EGPRoutes == 0:
                      outroutes = [route]
                      EGPRoutes += 1
                    else:
                      if route not in outroutes:
                        outroutes.append(route)
                        EGPRoutes += 1
                #Third Priority
                if packet[ORIG] == "UNK" :
                  if IGPRoutes == 0 and EGPRoutes == 0:
                    if UNKRoutes == 0:
                      outroutes = [route]
                      UNKRoutes += 1
                    else:
                      if route not in outroutes:
                        outroutes.append(route)
    return outroutes

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    print("DOING GET ORIGIN FOR THESE ROUTES: " + str(routes))
    relation = self.relations[srcif]
    outroutes = []
    for route in routes:
      destinationRelationship = self.relations[route]
      # Drop the Data Message
      if destinationRelationship == CUST:
        outroutes.append(route)
      elif relation == CUST:
        outroutes.append(route)
      else:
        return []
    return outroutes


  def get_lowest_address(self, routes):
    lowestRoutes = []
    return lowestRoutes

  def get_cidr_from_netmask(self, netmask):
    #For later use
    return (sum([bin(int(bits)).count("1") for bits in netmask.split(".")]))


  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    print("Starting get_route")
    peer = None
    routes = self.lookup_routes(daddr)
    print("THESE ARE THE ROUTES AFTER LOOKING UP ROUTES: " + str(routes))
    # Rules go here
    if routes:
      # 1. Highest Preference
      routes = self.get_highest_preference(routes, daddr)
      # 2. Self Origin
      routes = self.get_self_origin(routes, daddr)
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes, daddr)
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes, daddr)
      # 5. Lowest IP Address
      routes = [self.get_lowest_ip(routes)]
      # Final check: enforce peering relationships
      routes = self.filter_relationships(srcif, routes)
    print("THESE ARE THE ROUTES AFTER THE FILTERS BEFORE SELECTING THE FIRST: " + str(routes))
    if len(routes) == 1:
      peer = routes[0]
    else:
      print("THIS IS THE ROUTE LIST AT THIS POINT: " + str(routes))
    return self.sockets[peer] if peer else None
  
  def get_lower_ip(self, ip1, ip2):
    split_ip1 = ip1.split(".")
    split_ip2 = ip2.split(".")

    for i in range(len(split_ip1)):
      if split_ip1[i] == split_ip2[i]:
        continue
      elif split_ip1[i] < split_ip2[i]:
        return ip1
      elif split_ip2[i] < split_ip1[i]:
        return ip2
      else :
        return "!!!!! get_lowest_ip() broke with ips :", ip1, ip2
    return ip1

  def get_lowest_ip(self, ip_list):
    print("DOING GET ORIGIN FOR THESE ROUTES: " + str(ip_list))
    lowest_ip = None
    if len(ip_list) == 1:
      return ip_list[0]
    else:
      for i in range(len(ip_list) - 1):
        lowest_ip = self.get_lower_ip(ip_list[i], ip_list[i + 1])
      return lowest_ip


  def forward(self, srcif, packet, route=None):
    """ Forward a data packet """
    #Handling a DATA message
    if route != None:
      route.sendall(json.dumps(packet).encode())
      return True
    #Handling a DUMP Message
    else:
      self.sockets[srcif].sendall(json.dumps(packet).encode())

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False


  def send_update(self, srcif, packet):
    updatePacket = copy.deepcopy(packet)
    updatePacket[SRCE] = srcif.replace('.2', '.1')
    updatePacket[DEST] = srcif
    updatePacket[MESG][APTH].append(int(self.asn))
    print("SENDING THE FOLLOWING UPDATE MESSAGE: " + str(packet))
    self.sockets[srcif].sendall(json.dumps(updatePacket).encode())

  def update(self, srcif, packet):
    """ handle update packets """
    print("Sending Update From This Source Interface Socket: " + str(srcif))
    #Map our update message, Source mapped to the Message
    #1.) Save a copy of the announcement incase we need it later
    self.updates[packet[SRCE]] = packet
    #Update the Forwarding Table
    #2.) Add an entry to our forwarding table
    message = packet[MESG]
    tempDictionary = {}
    tempDictionary[NTWK] = message[NTWK]
    tempDictionary[NMSK] = message[NMSK]
    tempDictionary[LPRF] = message[LPRF]
    tempDictionary[APTH] = message[APTH]
    tempDictionary[ORIG] = message[ORIG]
    tempDictionary[SORG] = message[SORG]
    tempDictionary[PEER] = packet[SRCE]

    #Check if this peer already exists in our forwarding table
    if packet[SRCE] in self.forwardTable:
      self.forwardTable[packet[SRCE]].append(tempDictionary)
    else:
      self.forwardTable[packet[SRCE]] = [tempDictionary]

    print("UPDATED THE FORWARDING TABLE TO THE FOLLOWING: " + str(self.forwardTable))
    #Add to our updates which socket sent which update packet
    packet['srcif'] = srcif
    #Get the relation of the current socket connection
    relation = self.relations[srcif]
    #3.)Potentially send copies of the announcement to neighboring routers
    for s in self.sockets:
      # Update is recieved from a customer so we send the updates to all of the neighbors not including itself
      if relation == CUST:
        #Make sure we do not send the update to ourself
        if s == srcif:
          print("We are not sending to itself: " + str(s) + " " + str(srcif))
          continue
        else:
          self.send_update(s, packet)
      #Update is recieved from a peer or provider so we are only going to send the updates to your customers
      elif relation == PEER or relation == PROV:
        if self.relations[s] == CUST:
          self.send_update(s, packet)
    return True




  def send_revoke(self, srcif, packet):
    revokePacket = copy.deepcopy(packet)
    revokePacket[SRCE] = srcif.replace('.2', '.1')
    revokePacket[DEST] = srcif
    revokePacket[TYPE] = RVKE
    print("SENDING THE FOLLOWING REVOKE MESSAGE: " + str(packet))
    self.sockets[srcif].sendall(json.dumps(revokePacket).encode())


  def revoke(self, srcif, packet):
    """ handle revoke packets """
    #Save a copy of the revokation message
    self.revokes[packet[SRCE]] = packet
    Ftable = self.build_forward_table()
    revokedNetworks = packet[MESG]
    revokedSource = packet[SRCE]

    #remove reovked packets from our forwarding table
    #indicesToRemove = []
    valuesToRemove = []
    for revoke in revokedNetworks:
      for i in range(len(Ftable)):
        if revoke[NTWK] == Ftable[i][NTWK] and revoke[NMSK] == Ftable[i][NMSK] and revokedSource == Ftable[i][PEER]:
          valuesToRemove.append(Ftable[i])
    print("THESE ARE THE VALUES TO REMOVE: " + str(valuesToRemove))

    #remove from our forard table
    for val in valuesToRemove:
      Ftable.remove(val)

    for key in self.forwardTable:
      for val in valuesToRemove:
        if val[PEER] == key:
          self.forwardTable[key].remove(val)


    # Get the relation of the current socket connection
    relation = self.relations[srcif]
    # 3.)Potentially send copies of the announcement to neighboring routers
    for s in self.sockets:
      # Update is recieved from a customer so we send the updates to all of the neighbors not including itself
      if relation == CUST:
        # Make sure we do not send the update to ourself
        if s == srcif:
          print("We are not sending to itself: " + str(s) + " " + str(srcif))
          continue
        else:
          self.send_revoke(s, packet)
      # Update is recieved from a peer or provider so we are only going to send the updates to your customers
      elif relation == PEER or relation == PROV:
        if self.relations[s] == CUST:
          self.send_revoke(s, packet)
    return True

  def build_forward_table(self):
    table = []
    for key in self.forwardTable:
      for packet in self.forwardTable[key]:
        table.append(packet)
    return table


  def dump(self, packet):
    """ handles dump table requests """
    forwardTable = self.build_forward_table()
    #del forwardTable[1]
    tempDict = {}
    tempDict[SRCE] = packet[DEST]
    tempDict[DEST] = packet[SRCE]
    tempDict[TYPE] = TABL
    tempDict[MESG] = forwardTable
    print("THIS IS THE FORWARDING TABLE IN THE DUMP: " + str(tempDict[MESG]))
    self.forward(packet[SRCE], tempDict)
    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    type = packet['type']
    if type == DATA:
      print("Starting Forward")
      route = self.get_route(srcif, packet[DEST])
      return self.forward(srcif, packet, route)
    elif type == UPDT:
      print("Starting Update")
      return self.update(srcif, packet)
    elif type == RVKE:
      print("Starting Revoke")
      return self.revoke(srcif, packet)
    elif type == DUMP:
      print("Starting Dump")
      return self.dump(packet)
    elif type == "wait":
      pass
    else:
      print ("Unknown Packet Type: " + type)
      raise Exception("Unknown Packet Type " + type)

  def send_error(self, conn, msg, srcif):
    """ Send a no_route error message """
    print("Got an error when trying to handle the packet")
    print("Tried to handle this connection " + str(srcif))
    print("Tried to handle this message " + str(msg))
    tempDict = {}
    tempDict[SRCE] = srcif.replace('.2', '.1')
    tempDict[DEST] = msg[SRCE]
    tempDict[TYPE] = NRTE
    tempDict[MESG] = {}
    conn.send(json.dumps(tempDict).encode())
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          print ("---------------------------")
          print ("Type: " + msg['type'])
          print ("Source: " + msg['src'])
          print ("Destination: " + msg['dst'])
          print ("Message: " + json.dumps(msg['msg']))
          print ("---------------------------")
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg, srcif)
        else:
          return




if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn')
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  for val in ARGS.networks:
    print("This is one of the networks: " + val)
  print("This is the asn: " + str(ARGS.asn))
  Router(ARGS.networks, ARGS.asn).run()
